// –°–ª–∞–π–¥-—à–æ—É
document.addEventListener('DOMContentLoaded', function() {
    const slideshow = {
        slides: [
            "photo_2025-07-27_20-05-15.jpg",
            "photo_2025-07-27_19-24-01.jpg",
            "photo_2025-07-27_19-24-01 (2).jpg",
            "photo_2025-07-27_19-24-04.jpg",
            "photo_2025-07-27_20-05-15 (2).jpg",
            "photo_2025-07-27_20-05-16 (2).jpg",
            "photo_2025-07-27_19-24-04 (2).jpg",
            "photo_2025-07-27_20-05-16.jpg",
            "photo_2025-07-27_19-24-03.jpg",
            "photo_2025-07-27_20-39-00.jpg"
        ],
        currentIndex: 0,
        interval: null,
        delay: 6000, // 3 —Å–µ–∫—É–Ω–¥
        
        init: function() {
            const slidesContainer = document.querySelector('.slideshow-slides');
            const dotsContainer = document.querySelector('.slideshow-dots');
            
            // –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π–¥—ã
            this.slides.forEach((slide, index) => {
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥
                const slideDiv = document.createElement('div');
                slideDiv.className = 'slideshow-slide';
                slideDiv.innerHTML = `<img src="${slide}" alt="–ú–æ–º–µ–Ω—Ç ${index + 1}">`;
                slidesContainer.appendChild(slideDiv);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É
                const dot = document.createElement('div');
                dot.className = 'slideshow-dot';
                if (index === 0) dot.classList.add('active');
                dot.addEventListener('click', () => this.goToSlide(index));
                dotsContainer.appendChild(dot);
            });
            
            // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            document.querySelector('.slideshow-prev').addEventListener('click', () => this.prevSlide());
            document.querySelector('.slideshow-next').addEventListener('click', () => this.nextSlide());
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ
            this.startAutoPlay();
            
            // –ü–∞—É–∑–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            slidesContainer.parentElement.addEventListener('mouseenter', () => this.stopAutoPlay());
            slidesContainer.parentElement.addEventListener('mouseleave', () => this.startAutoPlay());
        },
        
        updateSlide: function() {
            const slidesContainer = document.querySelector('.slideshow-slides');
            const dots = document.querySelectorAll('.slideshow-dot');
            
            slidesContainer.style.transform = `translateX(-${this.currentIndex * 100}%)`;
            
            dots.forEach((dot, index) => {
                dot.classList.toggle('active', index === this.currentIndex);
            });
        },
        
        nextSlide: function() {
            this.currentIndex = (this.currentIndex + 1) % this.slides.length;
            this.updateSlide();
        },
        
        prevSlide: function() {
            this.currentIndex = (this.currentIndex - 1 + this.slides.length) % this.slides.length;
            this.updateSlide();
        },
        
        goToSlide: function(index) {
            this.currentIndex = index;
            this.updateSlide();
        },
        
        startAutoPlay: function() {
            this.stopAutoPlay();
            this.interval = setInterval(() => this.nextSlide(), this.delay);
        },
        
        stopAutoPlay: function() {
            if (this.interval) {
                clearInterval(this.interval);
                this.interval = null;
            }
        }
    };
    
    slideshow.init();
});
document.addEventListener('DOMContentLoaded', function() {
    // –ú—É–∑—ã–∫–∞ –∏ –∫–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const music = document.getElementById('birthdayMusic');
const musicButton = document.getElementById('musicButton');
let isMusicPlaying = false;

musicButton.addEventListener('click', function() {
    if (isMusicPlaying) {
        music.pause();
        musicButton.textContent = 'üéµ –í–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É';
        musicButton.classList.remove('playing');
    } else {
        music.play()
            .then(() => {
                musicButton.textContent = 'üîä –ú—É–∑—ã–∫–∞ –∏–≥—Ä–∞–µ—Ç';
                musicButton.classList.add('playing');
            })
            .catch(error => {
                console.log('–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:', error);
                musicButton.textContent = '‚ñ∂ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º—É–∑—ã–∫—É';
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º—É–∑—ã–∫—É" —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫');
            });
    }
    isMusicPlaying = !isMusicPlaying;
});

// –ê–≤—Ç–æ–ø–ª–µ–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
setTimeout(() => {
    music.play().catch(error => {
        console.log('–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –∂–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è');
    });
}, 1000);
    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Å—ã–ª–∫–∏
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            document.querySelector(this.getAttribute('href')).scrollIntoView({
                behavior: 'smooth'
            });
        });
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
    const canvas = document.getElementById('confetti');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    // –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setTimeout(() => {
        triggerConfetti();
    }, 1000);

    // –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –∫ —Å–µ–∫—Ü–∏—è–º
    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.3
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                triggerConfetti();
                entry.target.classList.add('animate__animated', 'animate__fadeInUp');
            }
        });
    }, observerOptions);

    document.querySelectorAll('.section').forEach(section => {
        observer.observe(section);
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
    let particles = [];
    const colors = ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800', '#FF5722'];

    function triggerConfetti() {
        for (let i = 0; i < 100; i++) {
            particles.push({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height - canvas.height,
                size: Math.random() * 10 + 5,
                color: colors[Math.floor(Math.random() * colors.length)],
                speed: Math.random() * 3 + 2,
                angle: Math.random() * 360,
                rotation: Math.random() * 0.2 - 0.1
            });
        }
    }

    function updateParticles() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        for (let i = 0; i < particles.length; i++) {
            const p = particles[i];
            ctx.save();
            ctx.translate(p.x, p.y);
            ctx.rotate(p.angle * Math.PI / 180);
            ctx.fillStyle = p.color;
            ctx.fillRect(-p.size / 2, -p.size / 2, p.size, p.size);
            ctx.restore();
            
            p.y += p.speed;
            p.angle += p.rotation;
            
            if (p.y > canvas.height) {
                particles.splice(i, 1);
                i--;
            }
        }
        
        if (particles.length > 0) {
            requestAnimationFrame(updateParticles);
        }
    }

    window.addEventListener('resize', () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∏
// –ó–∞–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é flipCard() –Ω–∞ —ç—Ç—É:
function flipCard() {
    const card = document.querySelector('.card');
    card.classList.toggle('flipped');
    triggerConfetti();
    updateParticles();
}

// –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è touch-—Å–æ–±—ã—Ç–∏–π
document.querySelector('.card').addEventListener('touchstart', function(e) {
    e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    flipCard();
}, {passive: false});

// –ö–æ–Ω—Ñ–µ—Ç—Ç–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ flipCard
let particles = [];
const colors = ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800', '#FF5722'];
const canvas = document.getElementById('confetti');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

function triggerConfetti() {
    for (let i = 0; i < 50; i++) {
        particles.push({
            x: Math.random() * canvas.width,
            y: -10,
            size: Math.random() * 10 + 5,
            color: colors[Math.floor(Math.random() * colors.length)],
            speed: Math.random() * 3 + 2,
            angle: Math.random() * 360,
            rotation: Math.random() * 0.2 - 0.1
        });
    }
}

function updateParticles() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    for (let i = 0; i < particles.length; i++) {
        const p = particles[i];
        ctx.save();
        ctx.translate(p.x, p.y);
        ctx.rotate(p.angle * Math.PI / 180);
        ctx.fillStyle = p.color;
        ctx.fillRect(-p.size / 2, -p.size / 2, p.size, p.size);
        ctx.restore();
        
        p.y += p.speed;
        p.angle += p.rotation;
        
        if (p.y > canvas.height) {
            particles.splice(i, 1);
            i--;
        }
    }
    
    if (particles.length > 0) {
        requestAnimationFrame(updateParticles);
    }
}